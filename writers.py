#!/usr/bin/python
from cppentities import *


class CAPIWriter(object):
    """Object that can write the pure C API corresponding to a given CPPClass object."""
    def __init__(self, filename):
        """filename is the name of the file to which the CAPIWriter will write text."""
        self._filename = filename
        self.writeHeader()

    def writeHeader(self):
        """Adds its header to the C API file."""
        with open(self._filename, 'w') as f:
            f.write('/* File generated by the pybindings project. */\n'
                    'extern "C"\n'
                    '{\n')

    def finalize(self):
        """Finalizes the file by closing braces etc."""
        with open(self._filename, 'a') as f:
            f.write('}\n\n')

    def writeClass(self, class_):
        """Writes the CPPClass class_ to the file in a C format."""
        for constructor in class_.getConstructors():
            self.writeConstructor(constructor)

        if class_.hasDestructor():
            self.writeDestructor(class_.getDestructor())

        self.finalize()

    def writeConstructor(self, constructor):
        """Writes the CPPConstructor to the file in a C format."""
        print('Writing constructor...')
        cline = '    ' + constructor.getName() + '_new('
        if len(constructor.getParameters()) > 0:
            self.appendValuesToString(constructor.getParameters(), cline)
        cline += ');\n'

        with open(self._filename, 'a') as f:
            f.write(cline)

    def writeDestructor(self, destructor):
        """Writes the CPPDestructor to the file in a C format."""
        print('Writing destructor...')
        with open(self._filename, 'a') as f:
            f.write('    ' + destructor.getName() + '_delete();\n')

    def appendValuesToString(self, values, string):
        """Append the CPPValues in values to the string in a C format."""
        if len(values) == 0:
            raise Exception('The \'values\' collection must not be empty.')
        else:
            itValue = values.__iter__()
            value = itValue.next()
            while True:
                string += str(value)
                try:
                    value = itValue.next()
                except StopIteration:
                    break
                else:
                    string += ', '
